import NoteList from '@/components/NoteList';
import { IndexProps, Note, Tag } from '@/utils/types';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { getAllRawNotes } from './api/rawnotes';
import { getAllTags } from './api/tags';

export const getServerSideProps: GetServerSideProps = async (context) => {
    let rawNotes = await getAllRawNotes();
    let tags = await getAllTags();

    rawNotes = JSON.parse(JSON.stringify(rawNotes));
    tags = JSON.parse(JSON.stringify(tags));
    // console.log(rawNotes);
    const notesWithTag = rawNotes.map(({ tagsWithID, ...restData }) => {
        return {
            ...restData,
            tags: tags.filter((tag) => tagsWithID.includes(tag.id)),
        };
    });
    return {
        props: {
            rawNotes,
            notes: notesWithTag,
            tags,
        },
    };
};

export default function Home({ notes, tags, rawNotes }: IndexProps) {
    const [allTags, setAllTags] = useState<Tag[]>(tags);
    const [allNotes, setAllNotes] = useState<Note[]>(notes);

    async function editTag(id: string, label: string) {
        const res = await fetch(`/api/tags`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id, label }),
        });
        const data = await res.json();
    }

    async function changeTag(id: string, label: string) {
        setAllTags((prevTags) => {
            return prevTags.map((tag) => {
                if (tag.id === id) {
                    return { ...tag, label };
                }
                return tag;
            });
        });
    }

    async function deleteTag(id: string) {
        console.log('delete tag');

        await fetch(`/api/tags`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id }),
        });

        setAllTags((prevTags) => {
            return prevTags.filter((tag) => tag.id !== id);
        });
    }

    useEffect(() => {
        const noteWithID = rawNotes.map(({ tagsWithID, ...restData }) => {
            return {
                ...restData,
                tags: allTags.filter((tag) => tagsWithID.includes(tag.id)),
            };
        });
        setAllNotes(noteWithID);
    }, [allTags, rawNotes]);

    return (
        <>
            <Head>
                <title>Note List</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <NoteList
                notes={allNotes}
                tags={allTags}
                onEditTag={(id, label) => editTag(id, label)}
                onDeleteTag={(id) => deleteTag(id)}
                onChangeTag={(id, label) => changeTag(id, label)}
            />
        </>
    );
}
